{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardList","map","_card","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","Component","App","onSearchChange","event","setState","searchfield","target","value","a","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yPAmBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAGxB,OAGI,cAFA,CAEA,OAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,WCILK,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAWD,EAAOE,KAAI,SAACC,EAAOC,GAGhC,OAAO,cAAC,EAAD,CAAkBT,GAAIK,EAAOI,GAAOT,GAAIF,KAAMO,EAAOI,GAAOX,KAAMC,MAAOM,EAAOI,GAAOV,OAA5EU,MAEtB,OACI,8BACKH,KCEEI,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCKZI,EAVA,SAACC,GAEZ,OAEI,aADA,CACA,OAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACMJ,EAAMK,YCqBLC,E,kDA1BX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAYjB,SAAkBC,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,K,oBAGvB,WACI,OAAIG,KAAKN,MAAMC,SACJ,6DAGJK,KAAKb,MAAMK,Y,uCAftB,SAAgCI,GAE5B,MAAO,CAAED,UAAU,O,GAVCM,aC2DbC,G,wDA9CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAlB1C,EAAKd,MAAQ,CACTlB,OAAQ,GACR8B,YAAa,IAJP,E,4FASd,8BAAAG,EAAA,sEAE2BC,MAAM,8CAFjC,cAEUC,EAFV,gBAGwBA,EAASC,OAHjC,OAGUC,EAHV,OAIIb,KAAKK,SAAS,CAAC7B,OAAQqC,IAJ3B,gD,0EAeA,WAAU,IAAD,EAC2Bb,KAAKN,MAA7BlB,EADH,EACGA,OAAQ8B,EADX,EACWA,YAEVQ,EAAiBtC,EAAOuC,QAAO,SAAAC,GAC7B,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAG7D,OAAQzC,EAAO2C,OAGX,sBAAK/C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAckB,KAAKG,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU3B,OAAQsC,WAP9B,oBAAI1C,UAAU,KAAd,4B,GAnCM6B,cCDHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCMdQ,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDZ,M","file":"static/js/main.f18e9fd3.chunk.js","sourcesContent":["// React must be in scope to use jsx.\nimport React from \"react\";\n\n// We can do destructuring inside the parameters\nconst Card = ({name, email, id}) => {\n    // const {name, email, id} = props;\n    // We can only return one element, eg the <div></div> here with its children.\n    return (\n        // bg: background, tc: text center, .dib { display: inline-block; }, br: border, pa: padding, ma: margin, \n        // bw: border weight, grow: grow on hover (animation)\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\n\n// Pure component: it receives something and returns something.\nconst CardList = ({ robots }) => {\n    const cardList = robots.map((_card, index) => {\n        // When we do something of a loop, we need to give it a unique key.\n        // If we return multiple lines we need to use the ().\n        return <Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email}/>\n    })\n    return (\n        <div>\n           { cardList } \n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"Search robots\"\n                onChange={ searchChange }>\n            </input>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\n// We want this component to wrap another component.\n// We have props, state and children.\nconst Scroll = (props) => {\n    // Even when we don't pass any props, all components have the children property.\n    return (\n        // style: javascript code that returns an object of css properties.\n        <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"800px\" }}>\n            { props.children }\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from \"react\";\n\n// Error boundaries are really useful when we are at production.\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n\n      componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.log(error, errorInfo);\n      }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops! That is not good...</h1>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\n// State means the description of your app. An object that describes your application and it's able to change.\n// STATE >> props | Props are just things that come out of state.\n\n\n// Lifecycle Methods (Lifecycle hooks: called automatically): https://reactjs.org/docs/react-component.html\n// Smart componet because we have state.\nclass App extends Component {\n    // To add a state\n    // App component with two states.\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: \"\"\n        };\n    }\n\n    // Getting the data from API.\n    async componentDidMount() {\n        // fetch is a method from the window object.\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const users = await response.json();\n        this.setState({robots: users});\n    }\n\n    // Anytime you make your own method on a component use arrow functions.\n    // Now \"this\" refers to where it was created, the App.\n    onSearchChange = (event)  => {\n        // WE ALWAYS HAVE TO DO IT THIS WAY!!!\n        this.setState({ searchfield: event.target.value });\n      \n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        // It gives us the value of the search.\n        const filteredRobots = robots.filter(robot => {\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n        // If the response from the API takes a long time\n        return !robots.length ?\n            <h1 className=\"tc\">Loading...</h1> :\n            // React uses JSX to create the Virtual DOM.\n            <div className=\"tc\">\n                <h1 className=\"f1\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        }\n    }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// The view library, the React Bot.\nimport React from 'react';  \n// Based on what screen we're rendering to. ReactDOM is used for the DOM. It's the glue of React.\n// We can have ReactNative that renders to mobile phones.\nimport ReactDOM from 'react-dom'; \nimport './index.css';\n// If it doesn't have ending for the type of file, we assume it is js.\nimport App from \"./containers/App\";\nimport reportWebVitals from './reportWebVitals';\n// To use the tachyons package, to have access to predefined classes for styling.\nimport \"tachyons\";\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}